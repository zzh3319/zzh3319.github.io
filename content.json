[{"title":"Hello World","date":"2015-07-17T16:00:00.000Z","path":"2015/07/18/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]},{"title":"Angular路由的定义和使用","date":"2015-07-17T16:00:00.000Z","path":"2015/07/18/angular/","text":"一、什么是routing（路由） Almost all non-trivial, non-demo Single Page App (SPA) require multiple pages. A settings page is different from a dashboard view. The login page is different from an accounts page（设置页面不同于控制页面，登录页面不同于账号信息页面。。。。就是说一个应用很多功能不同的页面） 我们可以使用Angular简单优雅地实现这个功能（页面之间的控制跳转…）二、安装 使用angular的路由功能需要安装routing模块…（引入angular-route.js就可以了） 三、定义 定义路由非常容易，在我们的应用mian模块里面注入ngRoute依赖就可以了 angular.module(‘myApp’, [‘ngRoute’]) .config(function($routeProvider) {}); 现在，我们就可以给应用定义路由了。在路由模块里面的.config()方法里面注入了$routeProvider，上面的代码给我们演示了两个用于定义路由的方法。 when() when()方法有两个参数，我们希望匹配的浏览器url和路由操作对象。一般main route经常使用“/”来表示，也可以定义URL参数，在controller里面就使用$routeParams获取url参数。 templateUrl: 表示路由跳转的view模板 controller: 控制器 angular.module(‘myApp’, [‘ngRoute’]) .config(function($routeProvider) { $routeProvider .when(‘/‘, { templateUrl: ‘views/main.html’, controller: ‘MainCtrl’ }) .when(‘/day/:id’, { templateUrl: ‘views/day.html’, controller: ‘DayCtrl’ })otherwise() otherwise()定义了当应用找不到指定路由的时候跳转的路由 angular.module(‘myApp’, [‘ngRoute’]).config(function($routeProvider) { $routeProvider .when(‘/‘, { templateUrl: ‘views/main.html’, controller: ‘MainCtrl’ }) .when(‘/day/:id’, { templateUrl: ‘views/day.html’, controller: ‘DayCtrl’ }) .otherwise({ redirectTo: ‘/‘ });}) 四、使用 定义好了路由需要怎么使用呢?我们要告诉angular页面的哪一个部分是我们希望转换的，这需要使用到ng-view指令 My page A footer 这样就只有会被更新， header/footer都始终保持不变","tags":[]},{"title":"Hello World","date":"2015-07-17T16:00:00.000Z","path":"2015/07/18/artile2/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[{"name":"PS3","slug":"PS3","permalink":"http://yoursite.com/tags/PS3/"},{"name":"Games","slug":"Games","permalink":"http://yoursite.com/tags/Games/"}]},{"title":"Vue.js为什么不支持templateUrl模式","date":"2015-07-17T16:00:00.000Z","path":"2015/07/18/vue/","text":"这篇文章是翻译的Vue.js的官方blog，最后加了些自己的理解。 原文地址：Why Vue.js doesn’t support templateURL 很多Vue的新手，特别是使用过Angular的都会问“我能不能用 templateURL”,由于回答了太多次了，所以作者决定记下来。 Angular的世界里，templateURL 或者 ng-include 允许使用者在运行时动态的加载远程模板文件，这个看起来很方便，作为一个自带功能，但是让我们来重新审视下这个功能。 首先，它允许我们能够编写一个分离的html文件作为模板，这样子我们就能在编辑的时候看到正确的语法高亮，这也是很多开发者喜欢的原因（注：我觉得这是因为现在的人越来越懒，越来越依赖IDE的原因）。但是分离你的js和html代码真的是个好主意么？在Vue.js的组件中，js和html天然紧耦合，事实上，这些代码在一个文件更简单易懂。在2个文件中来回切换上下文逻辑实际上让开发者更不爽。在vue的概念里，组件才是vue.js的基本构建单位，并不是模板文件。每一个vue.js的模板都伴随着他的好基友js，分离他们太过于残忍了。 其次，因为templateURL是在运行时通过ajax的方式加载模板，不需要构建步骤为了你分离的文件。开发的时候，这很爽，但是上线部署的时候，你就麻烦了。在HTTP2.0没有大面积支持前，HTTP的请求数仍然是页面加载的最关键因素。想象一下，在你的网站中，每个组件都是用templateURL，那么页面出来前，你可能需要加载几十个HTTP请求。可能你并不知道，大多数的浏览器是限制同一域名的并发请求数量的。当你超过这个限额的时候，你页面的初始渲染时间就得等待每次请求的返回。当然，有工具可以帮助你提前注册你所有的模板，但是这就多了一个构建步骤，事实上，这就是大型网站的必然趋势。 那么，在没有templateURL的情况下，我们怎么处理开发环境问题呢？ 在js里面拼接字符串是很烂的做法，使用 &lt;script type=&quot;x/template&quot;&gt;这种伪模板也不咋样。那么，现在是时候提升技能，使用像Webpack或者Browserify这种流行的模块构建器了。如果以前没有使用过，可能有点望而却步，但是相信我，这会有一个质的飞跃。对于大型网站和系统来说，适当的模块化很必要。更重要的是，你可以编写Vue组件在一个文件中，再加上语法高亮，自定义的预处理器，热加载，ES6，内置css，自动前置。可以让开发者提高10倍效率。 最后，Vue还能懒加载你的组件，加上使用wabpack非常容易，尽管这是为了解决一个问—构建页面文件过于庞大，初始化比较慢，所以你最好还是分割开来比较好。 抛弃template，拥抱组件世界吧！！ 以上是原文的翻译，并非完全直译，有很多自己的语言，大概意思相同，原谅我的文采不行。 个人觉得，Vue的组件思想跟React相似，把很多东西放在了js（这里是.vue文件）中，这种做法是把很多紧耦合的东西集中在一起管理，把原来分割开的css,html，js合成在一起，这个很像很多年的做法，所以很同意玉伯说的，看起来前端是在原地打转了一圈，开发模式回到了从前的样子，但是已经螺旋上升了哦，一切都在升级。 通过最近的使用来看，这种component的方式很方便，天然帮你做了解耦的分离，当然你需要转化自己的思维模式，不能在用jquery的操作DOM方式，同时和Angular也有很多区别，Vue并非一个框架，而是更像一个类库，这样很灵活，当然也会有人使用非常hack的方式来编写代码，可能会很蛋疼，这就需要自己注意了，对于团队而言，可以很好的积累各种组件，同时功能切分，合作起来更加容易，就看团队对Vue的理解程度了。","tags":[]},{"title":"H34509876543","date":"2015-07-17T16:00:00.000Z","path":"2015/07/18/bbbb/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server``` bash$ hexo server","tags":[]},{"title":"Welcome To My Blog","date":"2015-07-12T16:00:00.000Z","path":"2015/07/13/me/","text":"欢迎您的到来！","tags":[]}]